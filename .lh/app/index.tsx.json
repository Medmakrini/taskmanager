{
    "sourceFile": "app/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1721844923047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721844978492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { useContext } from 'react';\n import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/TaskContext';\n+import { TaskContext } from '../context/Context';\n import { useNavigation } from 'expo-router';\n \n const TaskListScreen: React.FC = () => {\n   const taskContext = useContext(TaskContext);\n"
                },
                {
                    "date": 1721845077099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,21 @@\n-import React, { useContext } from 'react';\n+]import React, { useContext } from 'react';\n import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/Context';\n-import { useNavigation } from 'expo-router';\n+import { TaskContext } from '../context/TaskContext';\n+import { useNavigation } from '@react-navigation/native';\n+import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { RootStackParamList } from '../types';\n \n+type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n+\n const TaskListScreen: React.FC = () => {\n   const taskContext = useContext(TaskContext);\n-  const navigation = useNavigation();\n+  const navigation = useNavigation<TaskListScreenNavigationProp>();\n \n   if (!taskContext) {\n     throw new Error('TaskContext must be used within a TaskProvider');\n   }\n-  \n+\n   const { tasks, removeTask, toggleComplete } = taskContext;\n \n   return (\n     <View style={{ flex: 1, padding: 16 }}>\n"
                },
                {
                    "date": 1721845084614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-]import React, { useContext } from 'react';\n+import React, { useContext } from 'react';\n import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/TaskContext';\n+import { TaskContext } from '../context/Context';\n import { useNavigation } from '@react-navigation/native';\n import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n import { RootStackParamList } from '../types';\n \n"
                },
                {
                    "date": 1721845090639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+import React, { useContext } from 'react';\n+import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n+import { TaskContext } from '../context/Context';\n+import { useNavigation } from '@react-navigation/native';\n+import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { RootStackParamList } from './typws';\n+\n+type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n+\n+const TaskListScreen: React.FC = () => {\n+  const taskContext = useContext(TaskContext);\n+  const navigation = useNavigation<TaskListScreenNavigationProp>();\n+\n+  if (!taskContext) {\n+    throw new Error('TaskContext must be used within a TaskProvider');\n+  }\n+\n+  const { tasks, removeTask, toggleComplete } = taskContext;\n+\n+  return (\n+    <View style={{ flex: 1, padding: 16 }}>\n+      <FlatList\n+        data={tasks}\n+        keyExtractor={item => item.id}\n+        renderItem={({ item }) => (\n+          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n+            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n+              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n+            </TouchableOpacity>\n+            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n+          </View>\n+        )}\n+      />\n+      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n+    </View>\n+  );\n+};\n+\n+export default TaskListScreen;\n"
                },
                {
                    "date": 1721845101557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n import { TaskContext } from '../context/Context';\n import { useNavigation } from '@react-navigation/native';\n import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { RootStackParamList } from './typws';\n+import { RootStackParamList } from './types';\n \n type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n \n const TaskListScreen: React.FC = () => {\n@@ -36,43 +36,4 @@\n   );\n };\n \n export default TaskListScreen;\n-import React, { useContext } from 'react';\n-import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/Context';\n-import { useNavigation } from '@react-navigation/native';\n-import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { RootStackParamList } from '../types';\n-\n-type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n-\n-const TaskListScreen: React.FC = () => {\n-  const taskContext = useContext(TaskContext);\n-  const navigation = useNavigation<TaskListScreenNavigationProp>();\n-\n-  if (!taskContext) {\n-    throw new Error('TaskContext must be used within a TaskProvider');\n-  }\n-\n-  const { tasks, removeTask, toggleComplete } = taskContext;\n-\n-  return (\n-    <View style={{ flex: 1, padding: 16 }}>\n-      <FlatList\n-        data={tasks}\n-        keyExtractor={item => item.id}\n-        renderItem={({ item }) => (\n-          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n-            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n-              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n-            </TouchableOpacity>\n-            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n-          </View>\n-        )}\n-      />\n-      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n-    </View>\n-  );\n-};\n-\n-export default TaskListScreen;\n"
                },
                {
                    "date": 1721845516579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import React, { useContext } from 'react';\n+import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n+import { TaskContext } from '../context/Context';\n+import { useNavigation } from '@react-navigation/native';\n+import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { RootStackParamList } from './types';\n+\n+type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n+\n+const TaskListScreen: React.FC = () => {\n+  const taskContext = useContext(TaskContext);\n+  const navigation = useNavigation<TaskListScreenNavigationProp>();\n+\n+  if (!taskContext) {\n+    throw new Error('TaskContext must be used within a TaskProvider');\n+  }\n+\n+  const { tasks, removeTask, toggleComplete } = taskContext;\n+\n+  return (\n+    <View style={{ flex: 1, padding: 16 }}>\n+      <FlatList\n+        data={tasks}\n+        keyExtractor={item => item.id}\n+        renderItem={({ item }) => (\n+          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n+            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n+              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n+              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n+            </TouchableOpacity>\n+            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n+          </View>\n+        )}\n+      />\n+      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n+    </View>\n+  );\n+};\n+\n+export default TaskListScreen;\n"
                },
                {
                    "date": 1721845526463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import React, { useContext } from 'react';\n+import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n+import { TaskContext } from '../context/Context';\n+import { useNavigation } from '@react-navigation/native';\n+import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { RootStackParamList } from './types';\n+\n+type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n+\n+const TaskListScreen: React.FC = () => {\n+  const taskContext = useContext(TaskContext);\n+  const navigation = useNavigation<TaskListScreenNavigationProp>();\n+\n+  if (!taskContext) {\n+    throw new Error('TaskContext must be used within a TaskProvider');\n+  }\n+\n+  const { tasks, removeTask, toggleComplete } = taskContext;\n+\n+  return (\n+    <View style={{ flex: 1, padding: 16 }}>\n+      <FlatList\n+        data={tasks}\n+        keyExtractor={item => item.id}\n+        renderItem={({ item }) => (\n+          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n+            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n+              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n+              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.description}</Text>\n+            </TouchableOpacity>\n+            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n+          </View>\n+        )}\n+      />\n+      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n+    </View>\n+  );\n+};\n+\n+export default TaskListScreen;\n"
                },
                {
                    "date": 1721845657709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import React, { useContext } from 'react';\n-import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/Context';\n+import { View, FlatList, StyleSheet } from 'react-native';\n+import { Button, Card, Text, IconButton, Title, Paragraph } from 'react-native-paper';\n+import { TaskContext } from '../context/TaskContext';\n import { useNavigation } from '@react-navigation/native';\n import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { RootStackParamList } from './types';\n+import { RootStackParamList } from '../types';\n \n type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n \n const TaskListScreen: React.FC = () => {\n@@ -17,24 +18,46 @@\n \n   const { tasks, removeTask, toggleComplete } = taskContext;\n \n   return (\n-    <View style={{ flex: 1, padding: 16 }}>\n+    <View style={styles.container}>\n       <FlatList\n         data={tasks}\n         keyExtractor={item => item.id}\n         renderItem={({ item }) => (\n-          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n-            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n-              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n-              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.description}</Text>\n-            </TouchableOpacity>\n-            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n-          </View>\n+          <Card style={styles.card}>\n+            <Card.Content>\n+              <Title style={item.completed ? styles.completed : undefined}>{item.title}</Title>\n+              <Paragraph>{item.description}</Paragraph>\n+            </Card.Content>\n+            <Card.Actions>\n+              <Button onPress={() => toggleComplete(item.id)}>{item.completed ? 'Unmark' : 'Complete'}</Button>\n+              <IconButton icon=\"delete\" onPress={() => removeTask(item.id)} />\n+            </Card.Actions>\n+          </Card>\n         )}\n       />\n-      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n+      <Button mode=\"contained\" onPress={() => navigation.navigate('add-task')} style={styles.addButton}>\n+        Add Task\n+      </Button>\n     </View>\n   );\n };\n \n+const styles = StyleSheet.create({\n+  container: {\n+    flex: 1,\n+    padding: 16,\n+    backgroundColor: '#f5f5f5',\n+  },\n+  card: {\n+    marginBottom: 10,\n+  },\n+  completed: {\n+    textDecorationLine: 'line-through',\n+  },\n+  addButton: {\n+    marginTop: 20,\n+  },\n+});\n+\n export default TaskListScreen;\n"
                },
                {
                    "date": 1721845663393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,11 @@\n import React, { useContext } from 'react';\n import { View, FlatList, StyleSheet } from 'react-native';\n import { Button, Card, Text, IconButton, Title, Paragraph } from 'react-native-paper';\n-import { TaskContext } from '../context/TaskContext';\n+import { TaskContext } from '../context/Context';\n import { useNavigation } from '@react-navigation/native';\n import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { RootStackParamList } from '../types';\n+import { RootStackParamList } from './types';\n \n type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n \n const TaskListScreen: React.FC = () => {\n@@ -60,83 +60,4 @@\n   },\n });\n \n export default TaskListScreen;\n-import React, { useContext } from 'react';\n-import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/Context';\n-import { useNavigation } from '@react-navigation/native';\n-import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { RootStackParamList } from './types';\n-\n-type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n-\n-const TaskListScreen: React.FC = () => {\n-  const taskContext = useContext(TaskContext);\n-  const navigation = useNavigation<TaskListScreenNavigationProp>();\n-\n-  if (!taskContext) {\n-    throw new Error('TaskContext must be used within a TaskProvider');\n-  }\n-\n-  const { tasks, removeTask, toggleComplete } = taskContext;\n-\n-  return (\n-    <View style={{ flex: 1, padding: 16 }}>\n-      <FlatList\n-        data={tasks}\n-        keyExtractor={item => item.id}\n-        renderItem={({ item }) => (\n-          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n-            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n-              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n-              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n-            </TouchableOpacity>\n-            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n-          </View>\n-        )}\n-      />\n-      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n-    </View>\n-  );\n-};\n-\n-export default TaskListScreen;\n-import React, { useContext } from 'react';\n-import { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\n-import { TaskContext } from '../context/Context';\n-import { useNavigation } from '@react-navigation/native';\n-import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n-import { RootStackParamList } from './types';\n-\n-type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n-\n-const TaskListScreen: React.FC = () => {\n-  const taskContext = useContext(TaskContext);\n-  const navigation = useNavigation<TaskListScreenNavigationProp>();\n-\n-  if (!taskContext) {\n-    throw new Error('TaskContext must be used within a TaskProvider');\n-  }\n-\n-  const { tasks, removeTask, toggleComplete } = taskContext;\n-\n-  return (\n-    <View style={{ flex: 1, padding: 16 }}>\n-      <FlatList\n-        data={tasks}\n-        keyExtractor={item => item.id}\n-        renderItem={({ item }) => (\n-          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n-            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n-              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n-            </TouchableOpacity>\n-            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n-          </View>\n-        )}\n-      />\n-      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n-    </View>\n-  );\n-};\n-\n-export default TaskListScreen;\n"
                },
                {
                    "date": 1721845770531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+import React, { useContext } from 'react';\n+import { View, FlatList, StyleSheet } from 'react-native';\n+import { Button, Card, Text, IconButton, Title, Paragraph } from 'react-native-paper';\n+import { TaskContext } from '../context/Context';\n+import { useNavigation } from '@react-navigation/native';\n+import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { RootStackParamList } from './types';\n+\n+type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n+\n+const TaskListScreen: React.FC = () => {\n+  const taskContext = useContext(TaskContext);\n+  const navigation = useNavigation<TaskListScreenNavigationProp>();\n+\n+  if (!taskContext) {\n+    throw new Error('TaskContext must be used within a TaskProvider');\n+  }\n+\n+  const { tasks, removeTask, toggleComplete } = taskContext;\n+\n+  return (\n+    <View style={styles.container}>\n+      <FlatList\n+        data={tasks}\n+        keyExtractor={item => item.id}\n+        renderItem={({ item }) => (\n+          <Card style={styles.card}>\n+            <Card.Content>\n+              <Title style={item.completed ? styles.completed : undefined}>{item.title}</Title>\n+              <Paragraph>{item.description}</Paragraph>\n+            </Card.Content>\n+            <Card.Actions>\n+              <Button onPress={() => toggleComplete(item.id)}>{item.completed ? 'Unmark' : 'Complete'}</Button>\n+              <IconButton icon=\"delete\" onPress={() => removeTask(item.id)} />\n+            </Card.Actions>\n+          </Card>\n+        )}\n+      />\n+      <Button mode=\"contained\" onPress={() => navigation.navigate('add-task')} style={styles.addButton}>\n+        Add Task\n+      </Button>\n+    </View>\n+  );\n+};\n+\n+const styles = StyleSheet.create({\n+  container: {\n+    flex: 1,\n+    padding: 16,\n+    backgroundColor: '#f5f5f5',\n+  },\n+  card: {\n+    marginBottom: 10,\n+  },\n+  completed: {\n+    textDecorationLine: 'line-through',\n+  },\n+  addButton: {\n+    marginTop: 10,\n+  },\n+});\n+\n+export default TaskListScreen;\n"
                },
                {
                    "date": 1721845782635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n   completed: {\n     textDecorationLine: 'line-through',\n   },\n   addButton: {\n-    marginTop: 0,\n+    marginBottom: 0,\n   },\n });\n \n export default TaskListScreen;\n"
                },
                {
                    "date": 1721845799664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,63 @@\n+import React, { useContext } from 'react';\n+import { View, FlatList, StyleSheet } from 'react-native';\n+import { Button, Card, Text, IconButton, Title, Paragraph } from 'react-native-paper';\n+import { TaskContext } from '../context/Context';\n+import { useNavigation } from '@react-navigation/native';\n+import { NativeStackNavigationProp } from '@react-navigation/native-stack';\n+import { RootStackParamList } from './types';\n+\n+type TaskListScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'TaskList'>;\n+\n+const TaskListScreen: React.FC = () => {\n+  const taskContext = useContext(TaskContext);\n+  const navigation = useNavigation<TaskListScreenNavigationProp>();\n+\n+  if (!taskContext) {\n+    throw new Error('TaskContext must be used within a TaskProvider');\n+  }\n+\n+  const { tasks, removeTask, toggleComplete } = taskContext;\n+\n+  return (\n+    <View style={styles.container}>\n+      <FlatList\n+        data={tasks}\n+        keyExtractor={item => item.id}\n+        renderItem={({ item }) => (\n+          <Card style={styles.card}>\n+            <Card.Content>\n+              <Title style={item.completed ? styles.completed : undefined}>{item.title}</Title>\n+              <Paragraph>{item.description}</Paragraph>\n+            </Card.Content>\n+            <Card.Actions>\n+              <Button onPress={() => toggleComplete(item.id)}>{item.completed ? 'Unmark' : 'Complete'}</Button>\n+              <IconButton icon=\"delete\" onPress={() => removeTask(item.id)} />\n+            </Card.Actions>\n+          </Card>\n+        )}\n+      />\n+      <Button mode=\"contained\" onPress={() => navigation.navigate('add-task')} style={styles.addButton}>\n+        Add Task\n+      </Button>\n+    </View>\n+  );\n+};\n+\n+const styles = StyleSheet.create({\n+  container: {\n+    flex: 1,\n+    padding: 16,\n+    backgroundColor: '#f5f5f5',\n+  },\n+  card: {\n+    marginBottom: 10,\n+  },\n+  completed: {\n+    textDecorationLine: 'line-through',\n+  },\n+  addButton: {\n+    marginBottom: 20,\n+  },\n+});\n+\n+export default TaskListScreen;\n"
                }
            ],
            "date": 1721844923047,
            "name": "Commit-0",
            "content": "import React, { useContext } from 'react';\nimport { View, Text, FlatList, Button, TouchableOpacity } from 'react-native';\nimport { TaskContext } from '../context/TaskContext';\nimport { useNavigation } from 'expo-router';\n\nconst TaskListScreen: React.FC = () => {\n  const taskContext = useContext(TaskContext);\n  const navigation = useNavigation();\n\n  if (!taskContext) {\n    throw new Error('TaskContext must be used within a TaskProvider');\n  }\n  \n  const { tasks, removeTask, toggleComplete } = taskContext;\n\n  return (\n    <View style={{ flex: 1, padding: 16 }}>\n      <FlatList\n        data={tasks}\n        keyExtractor={item => item.id}\n        renderItem={({ item }) => (\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>\n            <TouchableOpacity onPress={() => toggleComplete(item.id)}>\n              <Text style={{ textDecorationLine: item.completed ? 'line-through' : 'none' }}>{item.title}</Text>\n            </TouchableOpacity>\n            <Button title=\"Delete\" onPress={() => removeTask(item.id)} />\n          </View>\n        )}\n      />\n      <Button title=\"Add Task\" onPress={() => navigation.navigate('add-task')} />\n    </View>\n  );\n};\n\nexport default TaskListScreen;\n"
        }
    ]
}