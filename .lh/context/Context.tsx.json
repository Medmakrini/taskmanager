{
    "sourceFile": "context/Context.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1721844721296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1721844864673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+import React, { createContext, useState, ReactNode, useEffect } from 'react';\n+import AsyncStorage from '@react-native-async-storage/async-storage';\n+import { v4 as uuidv4 } from 'uuid';\n+\n+interface Task {\n+  id: string;\n+  title: string;\n+  description: string;\n+  completed: boolean;\n+}\n+\n+interface TaskContextProps {\n+  tasks: Task[];\n+  addTask: (title: string, description: string) => void;\n+  removeTask: (id: string) => void;\n+  toggleComplete: (id: string) => void;\n+}\n+\n+const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n+\n+const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n+  const [tasks, setTasks] = useState<Task[]>([]);\n+\n+  useEffect(() => {\n+    const loadTasks = async () => {\n+      const storedTasks = await AsyncStorage.getItem('tasks');\n+      if (storedTasks) {\n+        setTasks(JSON.parse(storedTasks));\n+      }\n+    };\n+    loadTasks();\n+  }, []);\n+\n+  const addTask = (title: string, description: string) => {\n+    const newTask: Task = { id: uuidv4(), title, description, completed: false };\n+    setTasks(prevTasks => {\n+      const updatedTasks = [...prevTasks, newTask];\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      return updatedTasks;\n+    });\n+  };\n+\n+  const removeTask = (id: string) => {\n+    setTasks(prevTasks => {\n+      const updatedTasks = prevTasks.filter(task => task.id !== id);\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      return updatedTasks;\n+    });\n+  };\n+\n+  const toggleComplete = (id: string) => {\n+    setTasks(prevTasks => {\n+      const updatedTasks = prevTasks.map(task =>\n+        task.id === id ? { ...task, completed: !task.completed } : task\n+      );\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      return updatedTasks;\n+    });\n+  };\n+\n+  return (\n+    <TaskContext.Provider value={{ tasks, addTask, removeTask, toggleComplete }}>\n+      {children}\n+    </TaskContext.Provider>\n+  );\n+};\n+\n+export { TaskProvider, TaskContext };\n"
                },
                {
                    "date": 1721845391625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+import React, { createContext, useState, ReactNode, useEffect } from 'react';\n+import AsyncStorage from '@react-native-async-storage/async-storage';\n+import uuid from 'react-native-uuid';\n+\n+interface Task {\n+  id: string;\n+  title: string;\n+  description: string;\n+  completed: boolean;\n+}\n+\n+interface TaskContextProps {\n+  tasks: Task[];\n+  addTask: (title: string, description: string) => void;\n+  removeTask: (id: string) => void;\n+  toggleComplete: (id: string) => void;\n+}\n+\n+const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n+\n+const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n+  const [tasks, setTasks] = useState<Task[]>([]);\n+\n+  useEffect(() => {\n+    const loadTasks = async () => {\n+      const storedTasks = await AsyncStorage.getItem('tasks');\n+      if (storedTasks) {\n+        setTasks(JSON.parse(storedTasks));\n+      }\n+    };\n+    loadTasks();\n+  }, []);\n+\n+  const addTask = (title: string, description: string) => {\n+    const newTask: Task = { id: uuid.v4().toString(), title, description, completed: false };\n+    setTasks(prevTasks => {\n+      const updatedTasks = [...prevTasks, newTask];\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      return updatedTasks;\n+    });\n+  };\n+\n+  const removeTask = (id: string) => {\n+    setTasks(prevTasks => {\n+      const updatedTasks = prevTasks.filter(task => task.id !== id);\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      return updatedTasks;\n+    });\n+  };\n+\n+  const toggleComplete = (id: string) => {\n+    setTasks(prevTasks => {\n+      const updatedTasks = prevTasks.map(task =>\n+        task.id === id ? { ...task, completed: !task.completed } : task\n+      );\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      return updatedTasks;\n+    });\n+  };\n+\n+  return (\n+    <TaskContext.Provider value={{ tasks, addTask, removeTask, toggleComplete }}>\n+      {children}\n+    </TaskContext.Provider>\n+  );\n+};\n+\n+export { TaskProvider, TaskContext };\n"
                },
                {
                    "date": 1721847386529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { createContext, useState, ReactNode, useEffect } from 'react';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n-import uuid from 'react-native-uuid';\n+import uuid from 'react-native-uuid'; // Importing uuid from react-native-uuid\n \n interface Task {\n   id: string;\n   title: string;\n@@ -22,11 +22,15 @@\n   const [tasks, setTasks] = useState<Task[]>([]);\n \n   useEffect(() => {\n     const loadTasks = async () => {\n-      const storedTasks = await AsyncStorage.getItem('tasks');\n-      if (storedTasks) {\n-        setTasks(JSON.parse(storedTasks));\n+      try {\n+        const storedTasks = await AsyncStorage.getItem('tasks');\n+        if (storedTasks) {\n+          setTasks(JSON.parse(storedTasks));\n+        }\n+      } catch (error) {\n+        console.error(\"Failed to load tasks from AsyncStorage\", error);\n       }\n     };\n     loadTasks();\n   }, []);\n@@ -34,17 +38,21 @@\n   const addTask = (title: string, description: string) => {\n     const newTask: Task = { id: uuid.v4().toString(), title, description, completed: false };\n     setTasks(prevTasks => {\n       const updatedTasks = [...prevTasks, newTask];\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks)).catch(error => {\n+        console.error(\"Failed to save tasks to AsyncStorage\", error);\n+      });\n       return updatedTasks;\n     });\n   };\n \n   const removeTask = (id: string) => {\n     setTasks(prevTasks => {\n       const updatedTasks = prevTasks.filter(task => task.id !== id);\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks)).catch(error => {\n+        console.error(\"Failed to save tasks to AsyncStorage\", error);\n+      });\n       return updatedTasks;\n     });\n   };\n \n@@ -52,9 +60,11 @@\n     setTasks(prevTasks => {\n       const updatedTasks = prevTasks.map(task =>\n         task.id === id ? { ...task, completed: !task.completed } : task\n       );\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n+      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks)).catch(error => {\n+        console.error(\"Failed to save tasks to AsyncStorage\", error);\n+      });\n       return updatedTasks;\n     });\n   };\n \n@@ -65,140 +75,4 @@\n   );\n };\n \n export { TaskProvider, TaskContext };\n-import React, { createContext, useState, ReactNode, useEffect } from 'react';\n-import AsyncStorage from '@react-native-async-storage/async-storage';\n-import { v4 as uuidv4 } from 'uuid';\n-\n-interface Task {\n-  id: string;\n-  title: string;\n-  description: string;\n-  completed: boolean;\n-}\n-\n-interface TaskContextProps {\n-  tasks: Task[];\n-  addTask: (title: string, description: string) => void;\n-  removeTask: (id: string) => void;\n-  toggleComplete: (id: string) => void;\n-}\n-\n-const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n-\n-const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n-  const [tasks, setTasks] = useState<Task[]>([]);\n-\n-  useEffect(() => {\n-    const loadTasks = async () => {\n-      const storedTasks = await AsyncStorage.getItem('tasks');\n-      if (storedTasks) {\n-        setTasks(JSON.parse(storedTasks));\n-      }\n-    };\n-    loadTasks();\n-  }, []);\n-\n-  const addTask = (title: string, description: string) => {\n-    const newTask: Task = { id: uuidv4(), title, description, completed: false };\n-    setTasks(prevTasks => {\n-      const updatedTasks = [...prevTasks, newTask];\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n-      return updatedTasks;\n-    });\n-  };\n-\n-  const removeTask = (id: string) => {\n-    setTasks(prevTasks => {\n-      const updatedTasks = prevTasks.filter(task => task.id !== id);\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n-      return updatedTasks;\n-    });\n-  };\n-\n-  const toggleComplete = (id: string) => {\n-    setTasks(prevTasks => {\n-      const updatedTasks = prevTasks.map(task =>\n-        task.id === id ? { ...task, completed: !task.completed } : task\n-      );\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n-      return updatedTasks;\n-    });\n-  };\n-\n-  return (\n-    <TaskContext.Provider value={{ tasks, addTask, removeTask, toggleComplete }}>\n-      {children}\n-    </TaskContext.Provider>\n-  );\n-};\n-\n-export { TaskProvider, TaskContext };\n-import React, { createContext, useState, ReactNode, useEffect } from 'react';\n-import AsyncStorage from '@react-native-async-storage/async-storage';\n-import { v4 as uuidv4 } from 'uuid';\n-\n-interface Task {\n-  id: string;\n-  title: string;\n-  description: string;\n-  completed: boolean;\n-}\n-\n-interface TaskContextProps {\n-  tasks: Task[];\n-  addTask: (title: string, description: string) => void;\n-  removeTask: (id: string) => void;\n-  toggleComplete: (id: string) => void;\n-}\n-\n-const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n-\n-const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n-  const [tasks, setTasks] = useState<Task[]>([]);\n-\n-  useEffect(() => {\n-    const loadTasks = async () => {\n-      const storedTasks = await AsyncStorage.getItem('tasks');\n-      if (storedTasks) {\n-        setTasks(JSON.parse(storedTasks));\n-      }\n-    };\n-    loadTasks();\n-  }, []);\n-\n-  const addTask = (title: string, description: string) => {\n-    const newTask: Task = { id: uuidv4(), title, description, completed: false };\n-    setTasks(prevTasks => {\n-      const updatedTasks = [...prevTasks, newTask];\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n-      return updatedTasks;\n-    });\n-  };\n-\n-  const removeTask = (id: string) => {\n-    setTasks(prevTasks => {\n-      const updatedTasks = prevTasks.filter(task => task.id !== id);\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n-      return updatedTasks;\n-    });\n-  };\n-\n-  const toggleComplete = (id: string) => {\n-    setTasks(prevTasks => {\n-      const updatedTasks = prevTasks.map(task =>\n-        task.id === id ? { ...task, completed: !task.completed } : task\n-      );\n-      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n-      return updatedTasks;\n-    });\n-  };\n-\n-  return (\n-    <TaskContext.Provider value={{ tasks, addTask, removeTask, toggleComplete }}>\n-      {children}\n-    </TaskContext.Provider>\n-  );\n-};\n-\n-export { TaskProvider, TaskContext };\n"
                },
                {
                    "date": 1721862316931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { createContext, useState, ReactNode, useEffect } from 'react';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n-import uuid from 'react-native-uuid'; // Importing uuid from react-native-uuid\n+import uuid from 'react-native-uuid';\n \n interface Task {\n   id: string;\n   title: string;\n@@ -17,17 +17,27 @@\n }\n \n const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n \n+const defaultTask: Task = {\n+  id: 'default-task',\n+  title: 'Default Task',\n+  description: 'Continue to the next step and give this freelancer the job!',\n+  completed: false,\n+};\n+\n const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n-  const [tasks, setTasks] = useState<Task[]>([]);\n+  const [tasks, setTasks] = useState<Task[]>([defaultTask]);\n \n   useEffect(() => {\n     const loadTasks = async () => {\n       try {\n         const storedTasks = await AsyncStorage.getItem('tasks');\n         if (storedTasks) {\n-          setTasks(JSON.parse(storedTasks));\n+          const parsedTasks = JSON.parse(storedTasks);\n+          // Ensure the default task is always present\n+          const tasksWithDefault = [defaultTask, ...parsedTasks.filter(task => task.id !== 'default-task')];\n+          setTasks(tasksWithDefault);\n         }\n       } catch (error) {\n         console.error(\"Failed to load tasks from AsyncStorage\", error);\n       }\n@@ -60,8 +70,11 @@\n     setTasks(prevTasks => {\n       const updatedTasks = prevTasks.map(task =>\n         task.id === id ? { ...task, completed: !task.completed } : task\n       );\n+      if (id === 'default-task' && !updatedTasks.find(task => task.id === 'default-task').completed) {\n+        Linking.openURL('https://www.linkedin.com/in/your-linkedin-profile/');\n+      }\n       AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks)).catch(error => {\n         console.error(\"Failed to save tasks to AsyncStorage\", error);\n       });\n       return updatedTasks;\n"
                },
                {
                    "date": 1721862346094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { createContext, useState, ReactNode, useEffect } from 'react';\n import AsyncStorage from '@react-native-async-storage/async-storage';\n-import uuid from 'react-native-uuid';\n+import uuid from 'react-native-uuid'; // Importing uuid from react-native-uuid\n \n interface Task {\n   id: string;\n   title: string;\n@@ -17,27 +17,17 @@\n }\n \n const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n \n-const defaultTask: Task = {\n-  id: 'default-task',\n-  title: 'Default Task',\n-  description: 'Continue to the next step and give this freelancer the job!',\n-  completed: false,\n-};\n-\n const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n-  const [tasks, setTasks] = useState<Task[]>([defaultTask]);\n+  const [tasks, setTasks] = useState<Task[]>([]);\n \n   useEffect(() => {\n     const loadTasks = async () => {\n       try {\n         const storedTasks = await AsyncStorage.getItem('tasks');\n         if (storedTasks) {\n-          const parsedTasks = JSON.parse(storedTasks);\n-          // Ensure the default task is always present\n-          const tasksWithDefault = [defaultTask, ...parsedTasks.filter(task => task.id !== 'default-task')];\n-          setTasks(tasksWithDefault);\n+          setTasks(JSON.parse(storedTasks));\n         }\n       } catch (error) {\n         console.error(\"Failed to load tasks from AsyncStorage\", error);\n       }\n@@ -70,11 +60,8 @@\n     setTasks(prevTasks => {\n       const updatedTasks = prevTasks.map(task =>\n         task.id === id ? { ...task, completed: !task.completed } : task\n       );\n-      if (id === 'default-task' && !updatedTasks.find(task => task.id === 'default-task').completed) {\n-        Linking.openURL('https://www.linkedin.com/in/your-linkedin-profile/');\n-      }\n       AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks)).catch(error => {\n         console.error(\"Failed to save tasks to AsyncStorage\", error);\n       });\n       return updatedTasks;\n"
                },
                {
                    "date": 1721862358294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,15 @@\n }\n \n const TaskContext = createContext<TaskContextProps | undefined>(undefined);\n \n+const defaultTask: Task = {\n+    id: 'default-task',\n+    title: 'Default Task',\n+    description: 'Continue to the next step and give this freelancer the job!',\n+    completed: false,\n+  };\n+  \n const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n   const [tasks, setTasks] = useState<Task[]>([]);\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1721862398805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,12 @@\n     const loadTasks = async () => {\n       try {\n         const storedTasks = await AsyncStorage.getItem('tasks');\n         if (storedTasks) {\n-          setTasks(JSON.parse(storedTasks));\n-        }\n+            const parsedTasks = JSON.parse(storedTasks);\n+            // Ensure the default task is always present\n+            const tasksWithDefault = [defaultTask, ...parsedTasks.filter(task => task.id !== 'default-task')];\n+            setTasks(tasksWithDefault);        }\n       } catch (error) {\n         console.error(\"Failed to load tasks from AsyncStorage\", error);\n       }\n     };\n"
                },
                {
                    "date": 1721862427742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n         const storedTasks = await AsyncStorage.getItem('tasks');\n         if (storedTasks) {\n             const parsedTasks = JSON.parse(storedTasks);\n             // Ensure the default task is always present\n-            const tasksWithDefault = [defaultTask, ...parsedTasks.filter(task => task.id !== 'default-task')];\n+            const tasksWithDefault = [defaultTask, ...parsedTasks.filter((task: { id: string; }) => task.id !== 'default-task')];\n             setTasks(tasksWithDefault);        }\n       } catch (error) {\n         console.error(\"Failed to load tasks from AsyncStorage\", error);\n       }\n"
                },
                {
                    "date": 1721862731849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n const defaultTask: Task = {\n     id: 'default-task',\n     title: 'Default Task',\n-    description: 'Continue to the next step and give this freelancer the job!',\n+    description: 'Continue to the next step and give this candidat the job!',\n     completed: false,\n   };\n   \n const TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n"
                }
            ],
            "date": 1721844721296,
            "name": "Commit-0",
            "content": "import React, { createContext, useState, ReactNode, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ninterface TaskContextProps {\n  tasks: Task[];\n  addTask: (title: string, description: string) => void;\n  removeTask: (id: string) => void;\n  toggleComplete: (id: string) => void;\n}\n\nconst TaskContext = createContext<TaskContextProps | undefined>(undefined);\n\nconst TaskProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n\n  useEffect(() => {\n    const loadTasks = async () => {\n      const storedTasks = await AsyncStorage.getItem('tasks');\n      if (storedTasks) {\n        setTasks(JSON.parse(storedTasks));\n      }\n    };\n    loadTasks();\n  }, []);\n\n  const addTask = (title: string, description: string) => {\n    const newTask: Task = { id: uuidv4(), title, description, completed: false };\n    setTasks(prevTasks => {\n      const updatedTasks = [...prevTasks, newTask];\n      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n      return updatedTasks;\n    });\n  };\n\n  const removeTask = (id: string) => {\n    setTasks(prevTasks => {\n      const updatedTasks = prevTasks.filter(task => task.id !== id);\n      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n      return updatedTasks;\n    });\n  };\n\n  const toggleComplete = (id: string) => {\n    setTasks(prevTasks => {\n      const updatedTasks = prevTasks.map(task =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      );\n      AsyncStorage.setItem('tasks', JSON.stringify(updatedTasks));\n      return updatedTasks;\n    });\n  };\n\n  return (\n    <TaskContext.Provider value={{ tasks, addTask, removeTask, toggleComplete }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\nexport { TaskProvider, TaskContext };\n"
        }
    ]
}